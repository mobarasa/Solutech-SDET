name: Run E2E Tests with Docker

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      - name: Verify docker directory and files
        id: verify-docker
        run: |
          if [ ! -d "docker" ]; then
            echo "The 'docker' directory is missing."
            exit 1
          fi
          cd docker
          if [ ! -f "build.sh" ] || [ ! -f "start.sh" ] || [ ! -f "config.sh" ] || [ ! -f "stop.sh" ]; then
            echo "One or more required .sh files are missing in the 'docker' directory."
            exit 1
          fi

      - name: Fix file permissions
        run: |
          cd docker
          sudo chmod +x *.sh
          sudo chmod +x setup/setup.sh

      - name: Build and start Docker containers
        run: |
          cd docker
          ./build.sh
          ./start.sh

      - name: Wait for MySQL to be ready
        run: |
          cd docker
          docker-compose exec -T mysql bash -c 'while ! mysqladmin ping -h mysql --silent; do sleep 1; done'

      - name: Configure application container and seed database
        run: |
          cd docker
          ./config.sh

      - name: Set up PHP and Node.js
        run: |
          # Fix permissions for the vendor directory
          sudo chown -R runner:runner .

          # Install PHP dependencies
          docker-compose exec -T php-fpm composer install --no-interaction --prefer-dist

          # Install JavaScript dependencies
          docker-compose exec -T php-fpm npm install

          # Set up environment variables
          docker-compose exec -T php-fpm cp .env.example .env
          docker-compose exec -T php-fpm php artisan key:generate

          # Set up the database
          docker-compose exec -T php-fpm php artisan migrate:fresh --seed

          # Compile assets
          docker-compose exec -T php-fpm npm run build

      - name: Install Cypress dependencies
        run: |
          cd docker
          docker-compose exec -T php-fpm npm install cypress-multi-reporters --save-dev

      - name: Wait for application server to be ready
        run: |
          cd docker
          while ! curl -s http://127.0.0.1:8000 > /dev/null; do
            echo "Waiting for application server to start..."
            sleep 5
          done

      - name: Run Cypress tests using Docker Compose
        run: |
          cd docker
          docker-compose up --exit-code-from cypress

      - name: List Cypress report directory
        run: ls -R ${{ github.workspace }}/cypress/reports

      - name: Upload Cypress Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/cypress/reports/html
          retention-days: 30

      - name: Stop Docker containers
        if: always()
        run: |
          cd docker
          ./stop.sh
